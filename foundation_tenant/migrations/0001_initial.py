# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2017-02-02 15:07
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'smeg_admission',
                'verbose_name': 'Admission',
                'verbose_name_plural': 'Admissions',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'smeg_brands',
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
            },
        ),
        migrations.CreateModel(
            name='BusinessIdea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('industry', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Construction'), (2, 'Business'), (3, 'Other')], default=1, help_text='The industry that this Business Idea belongs to.', verbose_name='Name')),
            ],
            options={
                'db_table': 'smeg_business_ideas',
                'verbose_name': 'Business Idea',
                'verbose_name_plural': 'Business Ideas',
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Calendar Event by Custom'), (2, 'Calendar Event by Tag')], default=1, help_text='The state this intake application is in our application.', verbose_name='type_of')),
                ('colour', models.CharField(blank=True, help_text='The colour of the item.', max_length=31, null=True, verbose_name='Colour')),
                ('start', models.DateTimeField(blank=True, help_text='The date/time this event starts on.', null=True)),
                ('finish', models.DateTimeField(blank=True, help_text='The date/time this event will finish.', null=True)),
            ],
            options={
                'db_table': 'smeg_calendar_events',
                'verbose_name': 'Calendar Event',
                'verbose_name_plural': 'Calendar Events',
            },
        ),
        migrations.CreateModel(
            name='CityOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The name of the City.', max_length=255, null=True, verbose_name='Name')),
            ],
            options={
                'db_table': 'smeg_city_options',
                'verbose_name': 'City Option',
                'verbose_name_plural': 'City Options',
            },
        ),
        migrations.CreateModel(
            name='CommentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'smeg_comment_posts',
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.CreateModel(
            name='CommunityAdvertisement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'smeg_community_advertisements',
                'verbose_name_plural': 'Community Advertisements',
                'ordering': ('-created',),
                'verbose_name': 'Community Advertisement',
            },
        ),
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'smeg_community_posts',
                'verbose_name_plural': 'Community Posts',
                'ordering': ('-created',),
                'verbose_name': 'Community Post',
            },
        ),
        migrations.CreateModel(
            name='ContactPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, default='', help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('contact_type', models.CharField(blank=True, default='', help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, default='', help_text='Email address.', max_length=254, null=True, verbose_name='Email')),
                ('fax_number', models.CharField(blank=True, default='', help_text='The fax number.', max_length=31, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', models.CharField(blank=True, default='', help_text='The telephone number.', max_length=31, null=True, verbose_name='Telephone')),
            ],
            options={
                'db_table': 'smeg_contact_points',
                'verbose_name': 'Contact Point',
                'verbose_name_plural': 'Contact Points',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('fax_number', models.CharField(blank=True, default='', help_text='The fax number.', max_length=31, null=True, verbose_name='Fax Number')),
                ('global_location_number', models.CharField(blank=True, help_text='The <a href="http://www.gs1.org/gln">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.', max_length=255, null=True, verbose_name='Global Location Number')),
                ('has_map', models.URLField(blank=True, help_text='A URL to a map of the place.', null=True, verbose_name='Has Map')),
                ('isic_v4', models.CharField(blank=True, help_text='The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.', max_length=255, null=True, verbose_name='ISIC V4')),
                ('telephone', models.CharField(blank=True, default='', help_text='The telephone number.', max_length=31, null=True, verbose_name='Telephone')),
            ],
            options={
                'db_table': 'smeg_countries',
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='CountryOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The name of the Country.', max_length=255, null=True, verbose_name='Name')),
            ],
            options={
                'db_table': 'smeg_country_options',
                'verbose_name': 'Country Option',
                'verbose_name_plural': 'Country Options',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Created Status'), (2, 'Pending Review Status'), (3, 'Ready Status')], default=1, help_text='The status of this Document.', verbose_name='Status')),
            ],
            options={
                'db_table': 'biz_documents',
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, help_text='The name of this Document Type.', max_length=127, null=True, verbose_name='Text')),
                ('is_master', models.BooleanField(default=False, help_text='Variable controls whether the Module this Document belongs to is the master document of the Module.', verbose_name='Is Master')),
                ('stage_num', models.PositiveSmallIntegerField(default=1, help_text='Track what stage this Document belongs to.', verbose_name='Stage Number')),
            ],
            options={
                'db_table': 'biz_document_types',
                'verbose_name': 'Document Type',
                'verbose_name_plural': 'Document Types',
            },
        ),
        migrations.CreateModel(
            name='FAQGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True, help_text='The title text.', null=True, verbose_name='Text')),
            ],
            options={
                'db_table': 'smeg_faq_groups',
                'verbose_name_plural': 'FAQ Groups',
                'ordering': ('created',),
                'verbose_name': 'FAQ Group',
            },
        ),
        migrations.CreateModel(
            name='FAQItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('question_text', models.CharField(blank=True, help_text='The question text.', max_length=255, null=True, verbose_name='Question')),
                ('answer_text', models.TextField(blank=True, help_text='The answer text.', null=True, verbose_name='Answer')),
                ('dislikers', models.ManyToManyField(blank=True, help_text='The Users whom disliked this item..', related_name='faq_item_dislikers_foundation_tenant_faqitem_related', to=settings.AUTH_USER_MODEL)),
                ('likers', models.ManyToManyField(blank=True, help_text='The Users whom liked this item.', related_name='faq_item_likers_foundation_tenant_faqitem_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'smeg_faq_items',
                'verbose_name_plural': 'FAQ Items',
                'ordering': ('created',),
                'verbose_name': 'FAQ Item',
            },
        ),
        migrations.CreateModel(
            name='GeoCoordinate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('address', models.CharField(blank=True, help_text='Physical address of the item.', max_length=255, null=True, verbose_name='Address')),
                ('address_country', models.CharField(blank=True, help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=255, null=True, verbose_name='Address Country')),
                ('elevation', models.FloatField(blank=True, default=0.0, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', verbose_name='Elevation')),
                ('latitude', models.FloatField(blank=True, default=0.0, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=0.0, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', verbose_name='Longitude')),
                ('postal_code', models.CharField(blank=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
            ],
            options={
                'db_table': 'smeg_geocoordinates',
                'verbose_name': 'GeoCoordinate',
                'verbose_name_plural': 'GeoCoordinates',
            },
        ),
        migrations.CreateModel(
            name='GovernmentBenefitOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.PositiveSmallIntegerField(default=0, help_text='The order to display this model as.', verbose_name='Order Number')),
                ('name', models.CharField(blank=True, help_text='The name of the benefit.', max_length=255, null=True, verbose_name='Name')),
            ],
            options={
                'db_table': 'smeg_government_benefit_options',
                'verbose_name_plural': 'Government Benefit Options',
                'ordering': ('order_number',),
                'verbose_name': 'Government Benefit Option',
            },
        ),
        migrations.CreateModel(
            name='IdentifyOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.PositiveSmallIntegerField(default=0, help_text='The order to display this model as.', verbose_name='Order Number')),
                ('name', models.CharField(blank=True, help_text='The name of the identity.', max_length=255, null=True, verbose_name='Name')),
            ],
            options={
                'db_table': 'smeg_identify_options',
                'verbose_name_plural': 'Identify Options',
                'ordering': ('order_number',),
                'verbose_name': 'Identify Option',
            },
        ),
        migrations.CreateModel(
            name='InfoResource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('is_stock', models.BooleanField(default=False, help_text='Variable controls whether this resource was created by the system and cannot be deleted.', verbose_name='Is this resource a stock resource')),
                ('is_for_staff', models.BooleanField(default=False, help_text='Variable controls whether staff will see this resource.', verbose_name='Is this resource available to the staff')),
                ('is_for_entrepreneur', models.BooleanField(default=False, help_text='Variable controls whether entrepreneurs will see this resource.', verbose_name='Is this resource available to the entrepreneur')),
                ('stage_num', models.PositiveSmallIntegerField(db_index=True, default=1, help_text='Track what stage this resource is accessible for the entrepreneur.', verbose_name='Stage Number')),
            ],
            options={
                'db_table': 'smeg_info_resources',
                'verbose_name': 'Information Resource',
                'verbose_name_plural': 'Information Resources',
            },
        ),
        migrations.CreateModel(
            name='InfoResourceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('order_num', models.PositiveSmallIntegerField(default=0, help_text='The order this category is to be ordered by.', verbose_name='Order Number')),
                ('icon', models.CharField(blank=True, help_text='The icon of this category.', max_length=31, null=True, verbose_name='Icon')),
                ('colour', models.CharField(blank=True, help_text='The colour of this category.', max_length=15, null=True, verbose_name='Colour')),
            ],
            options={
                'db_table': 'smeg_info_resource_categories',
                'verbose_name': 'Information Resource Category',
                'verbose_name_plural': 'Information Resources Category',
            },
        ),
        migrations.CreateModel(
            name='Intake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Created'), (2, 'Pending Review'), (3, 'In Review'), (4, 'Rejected'), (5, 'Approved')], db_index=True, default=1, help_text='The state this intake application is in our application.', verbose_name='Status')),
                ('is_employee_created', models.BooleanField(default=False, help_text='Variable controls whether the intake was created by the Advisor or not.', verbose_name='Is Employee Created')),
                ('how_can_we_help', models.PositiveSmallIntegerField(choices=[(1, 'I am interested in one of your programs'), (2, 'I am interested in one of your services'), (3, 'I want to find out how to start a business'), (4, 'I have an existing business I need help with'), (5, 'I want to find out about grants and loans'), (6, 'Other')], default=1, help_text='The details of how we can help the User.', verbose_name='How can we help you')),
                ('how_can_we_help_other', models.CharField(blank=True, default='', help_text='The text field for other.', max_length=255, null=True, verbose_name='Other')),
                ('how_did_you_hear', models.PositiveSmallIntegerField(choices=[(1, 'Google Search'), (2, 'Your Website'), (3, 'Other')], default=1, help_text='The details of how we can help the User.', verbose_name='How did you hear about our services')),
                ('how_did_you_hear_other', models.CharField(blank=True, default='', help_text='The text field for other.', max_length=255, null=True, verbose_name='Other')),
                ('do_you_own_a_biz', models.PositiveSmallIntegerField(choices=[(1, 'Yes'), (2, 'No'), (3, 'In the process of starting'), (4, 'I previously owned a business'), (5, 'None of the above')], default=1, help_text='User enters their current business owning status.', verbose_name='Do you currently own a business')),
                ('do_you_own_a_biz_other', models.CharField(blank=True, default='', help_text='The text field for other.', max_length=255, null=True, verbose_name='Other')),
                ('has_telephone', models.PositiveSmallIntegerField(choices=[(1, 'No'), (2, 'Yes')], default=1, help_text='Would you like to include your telephone?', verbose_name='Would you like to include your telephone?')),
                ('telephone', models.CharField(blank=True, default='', help_text='The text field for telephone number.', max_length=255, null=True, verbose_name='Telephone')),
                ('telephone_time', models.PositiveSmallIntegerField(choices=[(1, 'Morning'), (2, 'Afternoon'), (3, 'Evening'), (4, 'Anytime')], default=1, help_text='User best times to be contacted by.', verbose_name='When is it best to call you')),
                ('has_signed_privacy_and_terms', models.BooleanField(default=False, help_text='Has User agreed to our Privacy Policy and Terms of Use policy.', verbose_name='Has Signed Privacy Policy and Terms of Use')),
                ('has_signed_confidentiality_agreement', models.BooleanField(default=False, help_text='Has User agreed to our Confidentiality Agreement.', verbose_name='Has Signed Confidentiality Agreement')),
                ('has_signed_collection_and_use_of_information', models.BooleanField(default=False, help_text='Has User agreed to our Confidentiality Agreement.', verbose_name='Has Signed Confidentiality Agreement')),
                ('has_signed_with_name', models.CharField(blank=True, default='', help_text='The name the User has signed with.', max_length=127, null=True, verbose_name='Has Signed with Name')),
                ('has_signed_on_date', models.DateTimeField(blank=True, help_text='The timestamp of when the User officially signed our agreements.', null=True, verbose_name='Has Signed on Date')),
                ('other_government_benefit', models.CharField(blank=True, default='', help_text='The textfield used to take other benefits not mentioned in our list.', max_length=127, null=True, verbose_name='Other Government Benefit')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('has_business_idea', models.BooleanField(default=False, help_text='Variable controls whether the entrepreneur has a business or not.', verbose_name='I have a business idea')),
            ],
            options={
                'db_table': 'smeg_intakes',
                'verbose_name': 'Intake',
                'verbose_name_plural': 'Intakes',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'smeg_languages',
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='LogEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('text', models.CharField(blank=True, help_text='The details.', max_length=125, null=True, verbose_name='text')),
            ],
            options={
                'db_table': 'smeg_log_events',
                'verbose_name': 'Log Event',
                'verbose_name_plural': 'Log Events',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('date_read', models.DateTimeField(blank=True, help_text='The date/time at which the message has been read by the recipient if a single recipient exists.', null=True, verbose_name='Date Read')),
                ('date_received', models.DateTimeField(auto_now_add=True, help_text='The date/time the message was received if a single recipient exists.', null=True, verbose_name='Date Received')),
                ('date_sent', models.DateTimeField(auto_now_add=True, help_text='The date/time at which the message was sent.', null=True, verbose_name='Date Sent')),
            ],
            options={
                'db_table': 'smeg_messages',
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage_num', models.PositiveSmallIntegerField(db_index=True, default=1, help_text='Track what stage this Module belongs to.', verbose_name='Stage Number')),
                ('nodes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='[]', help_text='The slides and Questions nodes to be processed by this module.', verbose_name='Nodes')),
                ('title', models.CharField(blank=True, help_text='The title of this Module.', max_length=127, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, default='', help_text='A description of this Module.', null=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, help_text='The icon to display for this Module.', max_length=31, null=True, verbose_name='Icon')),
                ('colour', models.CharField(blank=True, help_text='The colour to display for this Module.', max_length=31, null=True, verbose_name='Colour')),
            ],
            options={
                'db_table': 'biz_modules',
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
            },
        ),
        migrations.CreateModel(
            name='NAICSOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq_num', models.PositiveSmallIntegerField(default=0, help_text='The order number this NAICS option is ordered by.', verbose_name='Sequence Number')),
                ('name', models.CharField(blank=True, help_text='The name of the NAICS Option.', max_length=127, null=True, verbose_name='Name')),
                ('year', models.PositiveSmallIntegerField(default=2012, help_text='The year this NAICS option was issued.', verbose_name='Year')),
                ('parent', models.ForeignKey(blank=True, help_text='The NAICS parent that this object belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='naics_option_country_foundation_tenant_naicsoption_related', to='foundation_tenant.NAICSOption')),
            ],
            options={
                'db_table': 'smeg_naics_options',
                'verbose_name_plural': 'NAICS Options',
                'ordering': ['seq_num'],
                'verbose_name': 'NAICS Option',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'smeg_notes',
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('icon', models.CharField(blank=True, help_text='The icon of this notification.', max_length=31, null=True, verbose_name='Icon')),
                ('type_of', models.CharField(blank=True, help_text='The colour of this notification.', max_length=15, null=True, verbose_name='Colour')),
            ],
            options={
                'db_table': 'smeg_notifications',
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='OpeningHoursSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('closes', models.CharField(blank=True, help_text='The closing hour of the place or service on the given day(s) of the week.', max_length=5, null=True, verbose_name='Closes')),
                ('day_of_week', models.CharField(blank=True, help_text='The day of the week for which these opening hours are valid.', max_length=2, null=True, verbose_name='Day Of Week')),
                ('opens', models.CharField(blank=True, help_text='The opening hour of the place or service on the given day(s) of the week.', max_length=5, null=True, verbose_name='Opens')),
                ('valid_from', models.DateField(blank=True, help_text='The date when the item becomes valid.', null=True, verbose_name='Valid From')),
                ('valid_through', models.DateField(blank=True, help_text='The end of the validity of offer, price specification, or opening hours data.', null=True, verbose_name='Valid Through')),
            ],
            options={
                'db_table': 'smeg_opening_hours_specifications',
                'verbose_name': 'Opening Hours Specification',
                'verbose_name_plural': 'Opening Hours Specifications',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('fax_number', models.CharField(blank=True, default='', help_text='The fax number.', max_length=31, null=True, verbose_name='Fax Number')),
                ('global_location_number', models.CharField(blank=True, help_text='The <a href="http://www.gs1.org/gln">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.', max_length=255, null=True, verbose_name='Global Location Number')),
                ('has_map', models.URLField(blank=True, help_text='A URL to a map of the place.', null=True, verbose_name='Has Map')),
                ('isic_v4', models.CharField(blank=True, help_text='The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.', max_length=255, null=True, verbose_name='ISIC V4')),
                ('telephone', models.CharField(blank=True, default='', help_text='The telephone number.', max_length=31, null=True, verbose_name='Telephone')),
            ],
            options={
                'db_table': 'smeg_places',
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
            },
        ),
        migrations.CreateModel(
            name='PostalAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('postal_code', models.CharField(blank=True, default='', help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('locality', models.CharField(blank=True, db_index=True, default='', help_text='The locality. For example, Mountain View.', max_length=127, null=True, verbose_name='Address Locality')),
                ('street_number', models.PositiveSmallIntegerField(blank=True, help_text='The street number.', null=True, verbose_name='Street Number')),
                ('suffix', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J'), ('K', 'K'), ('L', 'L'), ('M', 'M'), ('N', 'N'), ('O', 'O'), ('P', 'P'), ('Q', 'Q'), ('R', 'R'), ('S', 'S'), ('T', 'T'), ('U', 'U'), ('V', 'V'), ('W', 'W'), ('X', 'X'), ('Y', 'Y'), ('Z', 'Z'), ('¼', '¼'), ('½', '½'), ('¾', '¾')], help_text='The suffix.', max_length=1, null=True, verbose_name='Suffix')),
                ('street_name', models.CharField(blank=True, default='', help_text='The street name.', max_length=127, null=True, verbose_name='Street Name')),
                ('suite_number', models.CharField(blank=True, default='', help_text='The suite #.', max_length=7, null=True, verbose_name='Suite')),
                ('address_line_2', models.CharField(blank=True, default='', help_text='The address line 1.', max_length=31, null=True, verbose_name='Address Line 2')),
                ('address_line_3', models.CharField(blank=True, default='', help_text='The address line 3.', max_length=31, null=True, verbose_name='Address Line 3')),
                ('latitude', models.FloatField(blank=True, default=0.0, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=0.0, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', verbose_name='Longitude')),
                ('country', models.ForeignKey(blank=True, help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='postaladdress_country_foundation_tenant_postaladdress_related', to='foundation_tenant.CountryOption')),
            ],
            options={
                'db_table': 'smeg_postal_addresses',
                'verbose_name': 'Postal Address',
                'verbose_name_plural': 'Postal Addresses',
            },
        ),
        migrations.CreateModel(
            name='ProvinceOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The name of the Province Option.', max_length=255, null=True, verbose_name='Name')),
                ('country', models.ForeignKey(blank=True, help_text='The country this Province/state belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='province_option_country_foundation_tenant_provinceoption_related', to='foundation_tenant.CountryOption')),
            ],
            options={
                'db_table': 'smeg_province_options',
                'verbose_name': 'Province Option',
                'verbose_name_plural': 'Province Options',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The number to display for this question.', null=True, verbose_name='Number')),
                ('title', models.CharField(blank=True, help_text='The title of this question.', max_length=511, null=True, verbose_name='Title')),
                ('help', models.CharField(blank=True, help_text='The title of this question.', max_length=511, null=True, verbose_name='Help')),
                ('options', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='{}', help_text='The options to populate the question with.', verbose_name='Options')),
                ('content', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='{}', help_text='The content to populate the question with.', verbose_name='Content')),
                ('dependency', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='{}', help_text='The dependency code this question has to link with other questions.', verbose_name='Dependency')),
                ('validation', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='{}', help_text='The validation identification used for this question.', verbose_name='Validation')),
                ('type_id', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The question type ID to load up for the view.', null=True, verbose_name='Type ID')),
                ('document_type', models.ForeignKey(blank=True, help_text='The document type this question belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_document_typefoundation_tenant_question_related', to='foundation_tenant.DocumentType')),
            ],
            options={
                'db_table': 'biz_questions',
                'verbose_name_plural': 'Questions',
                'ordering': ('number',),
                'verbose_name': 'Question',
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, help_text='The content to populate the QuestionAnswer with.', verbose_name='content')),
                ('document', models.ForeignKey(blank=True, help_text='The document this answer belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_answer_document_foundation_tenant_questionanswer_related', to='foundation_tenant.Document')),
                ('question', models.ForeignKey(blank=True, help_text='The question this option belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_answer_question_foundation_tenant_questionanswer_related', to='foundation_tenant.Question')),
            ],
            options={
                'db_table': 'biz_question_answers',
                'verbose_name': 'Question Answer',
                'verbose_name_plural': 'Question Answers',
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The name of the City.', max_length=127, null=True, verbose_name='Introduction Title')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Introduction Description')),
                ('video_url', models.URLField(blank=True, help_text='The URL of our video for this slide.', null=True, verbose_name='Video URL')),
                ('module', models.ForeignKey(blank=True, help_text='The module this slide belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slide_module_foundation_tenant_slide_related', to='foundation_tenant.Module')),
            ],
            options={
                'db_table': 'biz_slides',
                'verbose_name': 'Slide',
                'verbose_name_plural': 'Slides',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the Tag item.', max_length=127, unique=True, verbose_name='Name')),
                ('is_program', models.BooleanField(default=False, help_text='Indicates if this Tag is to be used for programs.', verbose_name='Is program')),
                ('entrepreneurs_count', models.PositiveSmallIntegerField(default=0, help_text='Keep track of how many entrepreneurs that are assigned to this tag.', null=True, verbose_name='entrepreneurs_count')),
                ('entrepreneurs_average_stage_num', models.FloatField(default=0, help_text='Keep track of the average stage number that most entrepeneurs that belong this tag fall under.', null=True, verbose_name='Entrepreneurs Average Stage')),
            ],
            options={
                'db_table': 'smeg_tags',
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Open'), (2, 'Completed')], db_index=True, default=1, help_text='The state this task.', verbose_name='Status')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Task by Custom'), (2, 'Task by Tag')], default=1, help_text='The state this task in our application.', verbose_name='type_of')),
                ('start', models.DateTimeField(blank=True, help_text='The date/time this task will start.', null=True)),
                ('is_due', models.BooleanField(default=False, help_text='Indicates whether this Task has a due date or not.', verbose_name='Is Due')),
                ('due', models.DateTimeField(blank=True, help_text='The date/time this task will finish.', null=True)),
            ],
            options={
                'db_table': 'smeg_tasks',
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='TellUsYourNeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('needs_financial_management', models.BooleanField(default=False, verbose_name='Needs Financial Management')),
                ('needs_sales', models.BooleanField(default=False, verbose_name='Needs Sales')),
                ('needs_social_media', models.BooleanField(default=False, verbose_name='Needs Social Media')),
                ('needs_other', models.BooleanField(default=False, help_text='Indicates if we have other reasons.', verbose_name='Needs Other')),
                ('other', models.CharField(blank=True, default='', help_text='The text field for other.', max_length=255, null=True, verbose_name='Other')),
                ('owner', models.OneToOneField(help_text='The user whom owns this thing.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'smeg_tell_us_your_needs',
                'verbose_name': 'Tell Us Your Need',
                'verbose_name_plural': 'Tell Us Your Needs',
            },
        ),
        migrations.CreateModel(
            name='TenantFileUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('datafile', models.FileField(blank=True, help_text='An file of the upload.', null=True, upload_to='upload', verbose_name='File')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this object.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'smeg_tenant_file_uploads',
                'verbose_name': 'File Upload',
                'verbose_name_plural': 'File Uploads',
            },
        ),
        migrations.CreateModel(
            name='TenantImageUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('imagefile', models.ImageField(blank=True, help_text='An image of the upload.', null=True, upload_to='upload', verbose_name='Image')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this object.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'smeg_tenant_image_uploads',
                'verbose_name': 'Image Upload',
                'verbose_name_plural': 'Image Uploads',
            },
        ),
        migrations.CreateModel(
            name='TenantMe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('main_entity_of_page', models.URLField(blank=True, help_text='Indicates a page for which this thing is the main entity being described.', null=True, verbose_name='Main Entity Of Page')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('same_as', models.URLField(blank=True, help_text="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.", null=True, verbose_name='Same As')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('additional_name', models.CharField(blank=True, help_text='An additional name for a Person, can be used for a middle name.', max_length=127, null=True, verbose_name='Additional Name')),
                ('birth_date', models.DateField(blank=True, help_text='Date of birth.', null=True, verbose_name='birthDate')),
                ('death_date', models.DateField(blank=True, help_text='Date of death.', null=True, verbose_name='Death Date')),
                ('duns', models.CharField(blank=True, default='', help_text='The Dun & Bradstreet DUNS number for identifying an organization or business person.', max_length=127, null=True, verbose_name='Additional Name')),
                ('email', models.EmailField(blank=True, default='', help_text='Email address.', max_length=254, null=True, verbose_name='Email')),
                ('family_name', models.CharField(blank=True, default='', help_text='Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.', max_length=127, null=True, verbose_name='Family Name')),
                ('fax_number', models.CharField(blank=True, help_text='The fax number.', max_length=31, null=True, verbose_name='Fax Number')),
                ('given_name', models.CharField(blank=True, default='', help_text='Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.', max_length=127, null=True, verbose_name='Given Name')),
                ('global_location_number', models.CharField(blank=True, help_text='The <a href="http://www.gs1.org/gln">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.', max_length=255, null=True, verbose_name='Global Location Number')),
                ('honorific_prefix', models.CharField(blank=True, help_text="An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.", max_length=5, null=True, verbose_name='Honorific Prefix')),
                ('honorific_suffix', models.CharField(blank=True, help_text="An honorific suffix preceding a Person's name such as M.D. /PhD/MSCSW.", max_length=5, null=True, verbose_name='Honorific Suffix')),
                ('isic_v4', models.CharField(blank=True, help_text='The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.', max_length=255, null=True, verbose_name='ISIC V4')),
                ('job_title', models.CharField(blank=True, help_text='The job title of the person (for example, Financial Manager).', max_length=127, null=True, verbose_name='Job Title')),
                ('naics', models.CharField(blank=True, help_text='The North American Industry Classification System (NAICS) code for a particular organization or business person.', max_length=127, null=True, verbose_name='NAICS')),
                ('tax_id', models.CharField(blank=True, default='', help_text='The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.', max_length=255, null=True, verbose_name='Tax ID')),
                ('telephone', models.CharField(blank=True, default='', help_text='The telephone number.', max_length=31, null=True, verbose_name='Telephone')),
                ('vat_id', models.CharField(blank=True, default='', help_text='The Value-added Tax ID of the organization or person.', max_length=255, null=True, verbose_name='Tax ID')),
                ('is_in_intake', models.BooleanField(default=True, help_text='Variable controls whether the user has to go through the intake process before continuing.', verbose_name='Is in Intake Process')),
                ('stage_num', models.PositiveSmallIntegerField(db_index=True, default=0, help_text='Track what stage this User is in the system (If they are an entrepreneur).', verbose_name='Stage Number')),
                ('temporary_password', models.CharField(blank=True, help_text='The temporary password generated by the system.', max_length=8, null=True, verbose_name='Temporary Password')),
                ('is_tos_signed', models.BooleanField(default=True, verbose_name='Is terms of service signed')),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (3, 'Another'), (4, 'Other')], default=1, help_text='The gender this User identifies as.', verbose_name='Gender')),
                ('gender_other', models.CharField(blank=True, help_text='Allow the user to enter a custom gender field.', max_length=127, null=True, verbose_name='Gender Other')),
                ('level_of_education', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Some High School'), (2, 'High School diploma'), (3, 'Some Post-Secondary'), (4, 'Post-Secondary diploma'), (5, 'Graduate degree'), (6, 'Professional degree'), (7, 'Other')], default=1, help_text='The highest level of education this User has attained.', verbose_name='Highest Level of Education')),
                ('level_of_education_other', models.CharField(blank=True, help_text='Allow the user to enter a custom highest level of education field.', max_length=127, null=True, verbose_name='Highest Level of Education Other')),
                ('place_of_birth', models.CharField(blank=True, choices=[('Canada', 'Canada'), ('United States', 'United States'), ('Mexico', 'Mexico'), ('Afghanistan', 'Afghanistan'), ('Aland Islands', 'Aland Islands'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Indian Ocean Territory', 'British Indian Ocean Territory'), ('Brunei Darussalam', 'Brunei Darussalam'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Cocos (Keeling) Islands', 'Cocos (Keeling) Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Congo', 'Congo'), ('Cook Islands', 'Cook Islands'), ('Costa Rica', 'Costa Rica'), ("Cote D'Ivoire", "Cote D'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Falkland Islands (Malvinas)', 'Falkland Islands (Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern Territories', 'French Southern Territories'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and Mcdonald Islands', 'Heard Island and Mcdonald Islands'), ('Holy See (Vatican City State)', 'Holy See (Vatican City State)'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Japan', 'Japan'), ('Jersey', 'Jersey'), ('Jordan', 'Jordan'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kiribati', 'Kiribati'), ('Korea', 'Korea'), ('Korea DPR', 'Korea DPR'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macao', 'Macao'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Micronesia', 'Micronesia'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('Netherlands Antilles', 'Netherlands Antilles'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palestinian Territories', 'Palestinian Territories'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn', 'Pitcairn'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts & Nevis', 'Saint Kitts & Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre & Miquelon', 'Saint Pierre & Miquelon'), ('Saint Vincent & the Grenadines', 'Saint Vincent & the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia & the South Sandwich Islands', 'South Georgia & the South Sandwich Islands'), ('Spain', 'Spain'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard & Jan Mayen', 'Svalbard & Jan Mayen'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Thailand', 'Thailand'), ('Timor-Leste', 'Timor-Leste'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad & Tobago', 'Trinidad & Tobago'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks & Caicos Islands', 'Turks & Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('United States Minor Outlying Islands', 'United States Minor Outlying Islands'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Vietnam', 'Vietnam'), ('Virgin Islands, British', 'Virgin Islands, British'), ('Virgin Islands, U.S.', 'Virgin Islands, U.S.'), ('Wallis & Futuna', 'Wallis & Futuna'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe')], help_text='The place this User was born.', max_length=127, null=True, verbose_name='Place of Birth')),
                ('place_of_birth_other', models.CharField(blank=True, help_text='Allow the user to enter a custom place of birth field.', max_length=127, null=True, verbose_name='Place of Birth Other')),
                ('employment_status', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'employed full time'), (2, 'employed part time'), (3, 'underemployed'), (4, 'unemployed'), (5, 'receiving disability benefits'), (6, 'retired'), (7, 'Other')], default=1, help_text='The employment status of this User.', verbose_name='Employment Status')),
                ('employment_status_other', models.CharField(blank=True, help_text='Allow the user to enter a custom employment status field.', max_length=127, null=True, verbose_name='Employment Status')),
                ('education_or_training_status', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Highschool'), (2, 'Post-Secondary'), (3, 'Private career training'), (4, 'Specialized employment program'), (5, 'Other')], default=1, help_text='The employment status of this User.', verbose_name='Education or Training Status')),
                ('education_or_training_status_other', models.CharField(blank=True, help_text='Allow the user to enter a custom employment status field.', max_length=127, null=True, verbose_name='Education or Training Status')),
                ('why_be_entrepreneur', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'I want to work for myself'), (2, 'I want to control my own schedule'), (3, 'I want to make more money'), (4, 'I want better work-life balance'), (5, 'I have a business idea that I want to try out'), (6, 'Other')], default=1, help_text='Enter why the User wants to be an entrepreneur.', verbose_name='Why be an Entrepreneur')),
                ('why_be_entrepreneur_other', models.CharField(blank=True, help_text='Allow the user to enter a custom why be an entrepreneur field.', max_length=127, null=True, verbose_name='Why be an Entrepreneur Other')),
                ('challenges_becoming_entrepreneur', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'My health'), (2, 'Childcare'), (3, 'Transportation'), (4, 'Lack of Family support'), (5, 'Language skills'), (6, 'Other')], default=1, help_text='Enter challenges in becoming entrepreneur.', verbose_name='Challenges becoming Entrepreneur')),
                ('challenges_becoming_entrepreneur_other', models.CharField(blank=True, help_text='Allow  field.', max_length=127, null=True, verbose_name='Challenges becoming Entrepreneur Other')),
                ('annual_income_bracket', models.PositiveSmallIntegerField(choices=[(1, '$0-$24,999'), (2, '$25,000-$49,999'), (3, '$50,000-$74,999'), (4, '$75,000-$99,999'), (5, '$100,000+')], default=1, help_text='Enter your annual income bracket.', verbose_name='Annual Income Bracket')),
                ('has_owned_business', models.PositiveSmallIntegerField(choices=[(1, 'Yes'), (2, 'No'), (3, 'Other')], default=1, help_text='Enter has owned business.', verbose_name='Has Owned Business')),
                ('has_owned_business_other', models.CharField(blank=True, help_text='Allow has owned business other field.', max_length=127, null=True, verbose_name='Has Owned Business Other')),
                ('is_setup', models.BooleanField(default=False, help_text='Variable controls whether the user profile has been setup.', verbose_name='Is this account setup and ready')),
                ('is_locked', models.BooleanField(default=False, help_text='Controls whether the screen is locked or not.', verbose_name='Is Locked')),
                ('notify_when_task_had_an_interaction', models.BooleanField(default=True, verbose_name='Alert me when a task, that I am a participant in, had an interaction')),
                ('notify_when_new_messages', models.BooleanField(default=True, verbose_name='Alert me when I receive a new message')),
                ('notify_when_due_tasks', models.BooleanField(default=True, verbose_name='Alert me when I have an item due within 2 days')),
                ('has_logout_dialog', models.BooleanField(default=True, help_text='Variable indicates whether Users are prompted with a dialog during logout.', verbose_name='Has Logout Dialog')),
                ('address', models.ForeignKey(blank=True, help_text='Physical address of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_address_foundation_tenant_tenantme_related', to='foundation_tenant.PostalAddress')),
                ('birth_place', models.ForeignKey(blank=True, help_text='The place where the person was born.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_birth_place_foundation_tenant_tenantme_related', to='foundation_tenant.Place')),
                ('brands', models.ManyToManyField(blank=True, help_text='The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.', related_name='abstract_person_brands_foundation_tenant_tenantme_related', to='foundation_tenant.Brand')),
                ('children', models.ManyToManyField(blank=True, help_text='A child of the person. Supersedes colleagues.', related_name='_tenantme_children_+', to='foundation_tenant.TenantMe')),
                ('colleagues', models.ManyToManyField(blank=True, help_text='A colleague of the person. Supersedes colleagues.', related_name='_tenantme_colleagues_+', to='foundation_tenant.TenantMe')),
                ('contact_point', models.ForeignKey(blank=True, help_text='A contact point for a person or organization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_contact_point_foundation_tenant_tenantme_related', to='foundation_tenant.ContactPoint')),
                ('death_place', models.ForeignKey(blank=True, help_text='The place where the person died.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_death_place_foundation_tenant_tenantme_related', to='foundation_tenant.Place')),
                ('follows', models.ManyToManyField(blank=True, help_text='The most generic uni-directional social relation.', related_name='_tenantme_follows_+', to='foundation_tenant.TenantMe')),
                ('home_location', models.ForeignKey(blank=True, help_text="A contact location for a person's residence.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_death_place_foundation_tenant_tenantme_related', to='foundation_tenant.ContactPoint')),
                ('image', models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_tenantme_related', to='foundation_tenant.TenantImageUpload')),
                ('knows', models.ManyToManyField(blank=True, help_text='The most generic bi-directional social/work relation.', related_name='_tenantme_knows_+', to='foundation_tenant.TenantMe')),
                ('managed_by', models.ForeignKey(blank=True, help_text='The Users whom manages this User.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_me_managed_by_foundation_tenant_tenantme_related', to='foundation_tenant.TenantMe')),
                ('nationality', models.ForeignKey(blank=True, help_text='Nationality of the person.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_nationality_place_foundation_tenant_tenantme_related', to='foundation_tenant.Country')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_tenantme_related', to=settings.AUTH_USER_MODEL)),
                ('parents', models.ManyToManyField(blank=True, help_text='A parent of this person. Supersedes parents', related_name='_tenantme_parents_+', to='foundation_tenant.TenantMe')),
                ('related_to', models.ManyToManyField(blank=True, help_text='The most generic familial relation.', related_name='_tenantme_related_to_+', to='foundation_tenant.TenantMe')),
                ('siblings', models.ManyToManyField(blank=True, help_text='A sibling of the person. Supersedes siblings.', related_name='_tenantme_siblings_+', to='foundation_tenant.TenantMe')),
                ('spouse', models.ForeignKey(blank=True, help_text="The person's spouse.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_nationality_place_foundation_tenant_tenantme_related', to='foundation_tenant.TenantMe')),
                ('tags', models.ManyToManyField(blank=True, help_text='The tags that this User belongs to.', related_name='tenant_me_tags_foundation_tenant_tenantme_related', to='foundation_tenant.Tag')),
                ('work_location', models.ForeignKey(blank=True, help_text="A contact location for a person's place of work.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_person_work_location_foundation_tenant_tenantme_related', to='foundation_tenant.ContactPoint')),
            ],
            options={
                'db_table': 'smeg_tenant_mes',
                'verbose_name': 'Tenant Me',
                'verbose_name_plural': 'Tenant Mes',
            },
        ),
        migrations.CreateModel(
            name='TenantVisitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('path', models.CharField(help_text='The resource path that was visted.', max_length=63, verbose_name='Path')),
                ('ip_address', models.GenericIPAddressField(help_text='The location where the vistor is from.', verbose_name='IP Address')),
                ('me', models.ForeignKey(help_text='The user whom owns this thing. Anonymous users have this field set to NULL.', on_delete=django.db.models.deletion.CASCADE, to='foundation_tenant.TenantMe')),
            ],
            options={
                'db_table': 'smeg_tenant_visitors',
                'verbose_name': 'Tenant Visitor',
                'verbose_name_plural': 'Tenant Visitors',
            },
        ),
        migrations.CreateModel(
            name='Workspace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='The name of the City.', max_length=63, null=True, verbose_name='Name')),
                ('stage_num', models.PositiveSmallIntegerField(default=1, help_text='Track what stage this Workspace belongs to.', verbose_name='Stage Number')),
                ('mes', models.ManyToManyField(blank=True, db_index=True, help_text='The User profile owners of this workspace.', related_name='workspace_mes_foundation_tenant_workspace_related', to='foundation_tenant.TenantMe')),
            ],
            options={
                'db_table': 'biz_workspaces',
                'verbose_name': 'Workspace',
                'verbose_name_plural': 'Workspaces',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='assigned_by',
            field=models.ForeignKey(blank=True, help_text='The user whom assigned this task.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_assigned_by_foundation_tenant_task_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='task',
            name='closures',
            field=models.ManyToManyField(blank=True, help_text='The users who are participating in this task.', related_name='task_closures_foundation_tenant_task_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='task',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_task_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='task',
            name='opening',
            field=models.ManyToManyField(blank=True, help_text='The users who are not participating in this task.', related_name='task_opening_foundation_tenant_task_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='task',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_task_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='participants',
            field=models.ManyToManyField(blank=True, help_text='The users who are participating in this task.', related_name='task_participants_foundation_tenant_task_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='task',
            name='resources',
            field=models.ManyToManyField(blank=True, help_text='The the InfoResources associated with this Task.', related_name='task_resources_foundation_tenant_task_related', to='foundation_tenant.InfoResource'),
        ),
        migrations.AddField(
            model_name='task',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags that belong to this Task.', related_name='task_tags_foundation_tenant_task_related', to='foundation_tenant.Tag'),
        ),
        migrations.AddField(
            model_name='task',
            name='uploads',
            field=models.ManyToManyField(blank=True, help_text='The files uploaded by a User.', related_name='task_uploads_foundation_tenant_task_related', to='foundation_tenant.TenantFileUpload'),
        ),
        migrations.AddField(
            model_name='questionanswer',
            name='workspace',
            field=models.ForeignKey(blank=True, help_text='The workspace this answer belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_answer_workspace_foundation_tenant_questionanswer_related', to='foundation_tenant.Workspace'),
        ),
        migrations.AddField(
            model_name='postaladdress',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_postaladdress_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='postaladdress',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_postaladdress_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='postaladdress',
            name='region',
            field=models.ForeignKey(blank=True, help_text='The region. For example, CA.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='postaladdress_province_foundation_tenant_postaladdress_related', to='foundation_tenant.ProvinceOption'),
        ),
        migrations.AddField(
            model_name='place',
            name='address',
            field=models.ForeignKey(blank=True, help_text='Physical address of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_address_foundation_tenant_place_related', to='foundation_tenant.PostalAddress'),
        ),
        migrations.AddField(
            model_name='place',
            name='geo',
            field=models.ForeignKey(blank=True, help_text='The geo coordinates of the place.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_geo_foundation_tenant_place_related', to='foundation_tenant.GeoCoordinate'),
        ),
        migrations.AddField(
            model_name='place',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_place_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='place',
            name='logo',
            field=models.ForeignKey(blank=True, help_text='An associated logo.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_logo_foundation_tenant_place_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='place',
            name='opening_hours_specification',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='place_hours_available_foundation_tenant_place_related', to='foundation_tenant.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='place',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_place_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='place',
            name='photo',
            field=models.ForeignKey(blank=True, help_text='A photograph of this place.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_photo_foundation_tenant_place_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='openinghoursspecification',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_openinghoursspecification_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='openinghoursspecification',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_openinghoursspecification_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='closures',
            field=models.ManyToManyField(blank=True, help_text='The users who closed the notification.', related_name='foundation_tenant_notification_notification_closures_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='notification',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_notification_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='notification',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_notification_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='note',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_note_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='note',
            name='me',
            field=models.ForeignKey(help_text='The user profile that this Note belongs to.', on_delete=django.db.models.deletion.CASCADE, to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='note',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_note_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_message_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='message',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_message_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='participants',
            field=models.ManyToManyField(blank=True, help_text='The users who are participating in this message.', related_name='message_participants_foundation_tenant_message_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='message',
            name='recipient',
            field=models.ForeignKey(blank=True, help_text='The user whom this message is sent to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='message_recipient_foundation_tenant_message_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='message',
            name='sender',
            field=models.ForeignKey(blank=True, help_text='The user whom this message originates from.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='message_sender_foundation_tenant_message_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='logevent',
            name='me',
            field=models.ForeignKey(blank=True, help_text='The user whom caused this log event.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='log_event_me_foundation_tenant_logevent_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='language',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_language_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='language',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_language_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='intake',
            name='collection_note',
            field=models.ForeignKey(blank=True, help_text='The note indicating whether User has signed the collection and use of information document or not.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_collection_note_foundation_tenant_intake_related', to='foundation_tenant.Note'),
        ),
        migrations.AddField(
            model_name='intake',
            name='confidentiality_note',
            field=models.ForeignKey(blank=True, help_text='The note indicating whether User has signed the confidentiality document or not.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_confidentiality_note_foundation_tenant_intake_related', to='foundation_tenant.Note'),
        ),
        migrations.AddField(
            model_name='intake',
            name='government_benefits',
            field=models.ManyToManyField(blank=True, help_text='The government benefits that belong to this Intake.', related_name='intake_government_benefits_foundation_tenant_intake_related', to='foundation_tenant.GovernmentBenefitOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='how_can_we_help_tag',
            field=models.ForeignKey(blank=True, help_text='The Tag the User is interested in.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='foundation_tenant.Tag'),
        ),
        migrations.AddField(
            model_name='intake',
            name='identities',
            field=models.ManyToManyField(blank=True, help_text='The identify options belong to this Intake.', related_name='intake_identify_foundation_tenant_intake_related', to='foundation_tenant.IdentifyOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='judgement_note',
            field=models.ForeignKey(blank=True, help_text='The comments that where entered during the Intake judgement process.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_judgement_note_foundation_tenant_intake_related', to='foundation_tenant.Note'),
        ),
        migrations.AddField(
            model_name='intake',
            name='me',
            field=models.OneToOneField(help_text='The User that this Intake belongs to.', on_delete=django.db.models.deletion.CASCADE, to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='intake',
            name='naics_depth_five',
            field=models.ForeignKey(blank=True, help_text='The NAICS option for depth five.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_naics_depth_five_foundation_tenant_intake_related', to='foundation_tenant.NAICSOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='naics_depth_four',
            field=models.ForeignKey(blank=True, help_text='The NAICS option for depth four.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_naics_depth_four_foundation_tenant_intake_related', to='foundation_tenant.NAICSOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='naics_depth_one',
            field=models.ForeignKey(blank=True, help_text='The NAICS option for depth one.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_naics_depth_one_foundation_tenant_intake_related', to='foundation_tenant.NAICSOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='naics_depth_three',
            field=models.ForeignKey(blank=True, help_text='The NAICS option for depth three.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_inaics_depth_three_foundation_tenant_intake_related', to='foundation_tenant.NAICSOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='naics_depth_two',
            field=models.ForeignKey(blank=True, help_text='The NAICS option for depth two.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_naics_depth_two_foundation_tenant_intake_related', to='foundation_tenant.NAICSOption'),
        ),
        migrations.AddField(
            model_name='intake',
            name='privacy_note',
            field=models.ForeignKey(blank=True, help_text='The note indicating whether User has signed the privacy policy document or not.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_privacy_note_foundation_tenant_intake_related', to='foundation_tenant.Note'),
        ),
        migrations.AddField(
            model_name='intake',
            name='terms_note',
            field=models.ForeignKey(blank=True, help_text='The note indicating whether User has signed the terms of use document or not.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intake_terms_note_foundation_tenant_intake_related', to='foundation_tenant.Note'),
        ),
        migrations.AddField(
            model_name='inforesourcecategory',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_inforesourcecategory_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='inforesourcecategory',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_inforesourcecategory_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inforesource',
            name='category',
            field=models.ForeignKey(blank=True, help_text='The category.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='info_resource_category', to='foundation_tenant.InfoResourceCategory'),
        ),
        migrations.AddField(
            model_name='inforesource',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_inforesource_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='inforesource',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_inforesource_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inforesource',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags that this User belongs to.', related_name='info_resources_tags_foundation_tenant_inforesource_related', to='foundation_tenant.Tag'),
        ),
        migrations.AddField(
            model_name='inforesource',
            name='uploads',
            field=models.ManyToManyField(blank=True, help_text='The files uploaded by a User.', related_name='info_resources_uploads_foundation_tenant_inforesource_related', to='foundation_tenant.TenantFileUpload'),
        ),
        migrations.AddField(
            model_name='geocoordinate',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_geocoordinate_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='geocoordinate',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_geocoordinate_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='faqgroup',
            name='items',
            field=models.ManyToManyField(blank=True, help_text='The items inside this group.', related_name='faq_group_items_foundation_tenant_faqgroup_related', to='foundation_tenant.FAQItem'),
        ),
        migrations.AddField(
            model_name='document',
            name='document_type',
            field=models.ForeignKey(blank=True, help_text='The document type this document is.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='document_document_typefoundation_tenant_document_related', to='foundation_tenant.DocumentType'),
        ),
        migrations.AddField(
            model_name='document',
            name='docxpresso_file',
            field=models.ForeignKey(blank=True, help_text='The files uploaded by a User.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='foundation_tenant_document_file_related', to='foundation_tenant.TenantFileUpload'),
        ),
        migrations.AddField(
            model_name='document',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_document_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='document',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_document_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='document',
            name='workspace',
            field=models.ForeignKey(blank=True, help_text='The Workspace this Document belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='document_workspace_foundation_tenant_document_related', to='foundation_tenant.Workspace'),
        ),
        migrations.AddField(
            model_name='country',
            name='address',
            field=models.ForeignKey(blank=True, help_text='Physical address of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_address_foundation_tenant_country_related', to='foundation_tenant.PostalAddress'),
        ),
        migrations.AddField(
            model_name='country',
            name='geo',
            field=models.ForeignKey(blank=True, help_text='The geo coordinates of the place.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_geo_foundation_tenant_country_related', to='foundation_tenant.GeoCoordinate'),
        ),
        migrations.AddField(
            model_name='country',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_country_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='country',
            name='logo',
            field=models.ForeignKey(blank=True, help_text='An associated logo.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_logo_foundation_tenant_country_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='country',
            name='opening_hours_specification',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='place_hours_available_foundation_tenant_country_related', to='foundation_tenant.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='country',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_country_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='country',
            name='photo',
            field=models.ForeignKey(blank=True, help_text='A photograph of this place.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='place_photo_foundation_tenant_country_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='contactpoint',
            name='available_language',
            field=models.ForeignKey(blank=True, help_text='A language someone may use with the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_point_available_language_foundation_tenant_contactpoint_related', to='foundation_tenant.Language'),
        ),
        migrations.AddField(
            model_name='contactpoint',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='contact_point_hours_available_foundation_tenant_contactpoint_related', to='foundation_tenant.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='contactpoint',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_contactpoint_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='contactpoint',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_contactpoint_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_communitypost_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='likers',
            field=models.ManyToManyField(blank=True, help_text='The Users whom liked this post.', related_name='community_post_likers_foundation_tenant_communitypost_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='me',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_communitypost_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags that this User belongs to.', related_name='community_post_tags_foundation_tenant_communitypost_related', to='foundation_tenant.Tag'),
        ),
        migrations.AddField(
            model_name='communityadvertisement',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_communityadvertisement_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='communityadvertisement',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_communityadvertisement_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='commentpost',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_commentpost_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='commentpost',
            name='me',
            field=models.ForeignKey(blank=True, help_text='The user whom this comment belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_post_me_foundation_tenant_commentpost_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='commentpost',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_commentpost_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cityoption',
            name='country',
            field=models.ForeignKey(blank=True, help_text='The country this City belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='city_country_foundation_tenant_cityoption_related', to='foundation_tenant.CountryOption'),
        ),
        migrations.AddField(
            model_name='cityoption',
            name='province',
            field=models.ForeignKey(blank=True, help_text='The Province this City belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='city_province_foundation_tenant_cityoption_related', to='foundation_tenant.ProvinceOption'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='absentees',
            field=models.ManyToManyField(blank=True, help_text='The users who are participating in this event.', related_name='calendar_event_absentee_foundation_tenant_calendarevent_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='attendees',
            field=models.ManyToManyField(blank=True, help_text='The users who are participating in this event.', related_name='calendar_event_attendees_foundation_tenant_calendarevent_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_calendarevent_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_calendarevent_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='pending',
            field=models.ManyToManyField(blank=True, help_text='The users who need to review whether they will attend this event or not.', related_name='calendar_event_pending_foundation_tenant_calendarevent_related', to='foundation_tenant.TenantMe'),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags that belong to this event.', related_name='calendar_event_tags_foundation_tenant_calendarevent_related', to='foundation_tenant.Tag'),
        ),
        migrations.AddField(
            model_name='businessidea',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='business_idea_image_foundation_tenant_businessidea_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='businessidea',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='brand',
            name='image',
            field=models.ForeignKey(blank=True, help_text='An image of the item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abstract_thing_image_foundation_tenant_brand_related', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='brand',
            name='logo',
            field=models.ForeignKey(blank=True, help_text='An associated logo.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='brand_logo', to='foundation_tenant.TenantImageUpload'),
        ),
        migrations.AddField(
            model_name='brand',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='abstract_thing_owner_foundation_tenant_brand_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='admission',
            name='tag',
            field=models.OneToOneField(help_text='The Tag to handle our admission.', on_delete=django.db.models.deletion.CASCADE, to='foundation_tenant.Tag'),
        ),
        migrations.AddField(
            model_name='admission',
            name='users',
            field=models.ManyToManyField(blank=True, help_text='The entrepreneur Users that belong to this program.', related_name='admission_users_foundation_tenant_admission_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SortedCalendarEventByCreated',
            fields=[
            ],
            options={
                'db_table': 'smeg_sorted_calendar_events_by_created',
                'verbose_name': 'Sorted by Created Calendar Event',
                'verbose_name_plural': 'Sorted by Created Calendar Events',
                'proxy': True,
                'ordering': ('-created',),
            },
            bases=('foundation_tenant.calendarevent',),
        ),
        migrations.CreateModel(
            name='SortedCommentPostByCreated',
            fields=[
            ],
            options={
                'db_table': 'smeg_sorted_comment_posts_by_created',
                'verbose_name': 'Sorted Comment by Created',
                'verbose_name_plural': 'Sorted Comments by Created',
                'proxy': True,
                'ordering': ('created',),
            },
            bases=('foundation_tenant.commentpost',),
        ),
        migrations.CreateModel(
            name='SortedLogEventByCreated',
            fields=[
            ],
            options={
                'db_table': 'smeg_sorted_log_events_by_created',
                'verbose_name': 'Sorted by Created Log Event',
                'verbose_name_plural': 'Sorted by Created Log Events',
                'proxy': True,
                'ordering': ('created',),
            },
            bases=('foundation_tenant.logevent',),
        ),
        migrations.AddField(
            model_name='task',
            name='comment_posts',
            field=models.ManyToManyField(blank=True, help_text='The comment posts associated with this Task.', related_name='task_comment_posts_foundation_tenant_task_related', to='foundation_tenant.SortedCommentPostByCreated'),
        ),
        migrations.AddField(
            model_name='task',
            name='log_events',
            field=models.ManyToManyField(blank=True, help_text='The log events associated with this Task.', related_name='task_log_events_foundation_tenant_task_related', to='foundation_tenant.SortedLogEventByCreated'),
        ),
    ]
